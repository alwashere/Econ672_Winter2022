/* set working path
    cd <your path>
*/

/* Define paths for data and output */
global data "Data"
global output "Output"

log using "$output/HolderPS1.log", replace

/*================================================
     Name: Jon Holder
     Class: ECON 672
     Problem Set 1
 =================================================*/

/* =============================================

    This *.do file expects the following folder
      structure in the working directory:

      Data/ - Contains the data for analysis
      Output/ - Contains *.log, plots, tables, etc
                external output generated by Stata

================================================*/

/* =============================================
Start Data Prep and Exploration
================================================*/
use "$data/persico2004.dta", clear
describe

/* Examine the gender breakdown in the original 1979 sample. */
tab SAMPLE_SEX_1979

/* Restrict the data to white males not in the poor supplemental group. */
codebook SAMPLE_RACE_78SCRN SAMPLE_SEX_1979 SAMPLE_ID_1979
label list vlR0173600

/*
    White, non-Hispanic respondents are coded as 3 in SAMPLE_RACE_78SCRN field.  
    Male respondents are coded as 1 in the SAMPLE_SEX_1979 field.  
    Poor white males are coded as 9 in the SAMPLE_ID_1979 field.
*/
keep if SAMPLE_RACE_78SCRN==3 & SAMPLE_SEX_1979==1 & SAMPLE_ID_1979 != 9
count

/*
    3,048 Observations remaining which matches the Persico, Postlewaite,
     and Silverman (2004) dataset.
*/

/*  Generate height81 */
codebook HEALTH_HEIGHT_1981

/* 
    Error coded values are less than 0.  The error values are replaced with 900 
    for parsing by the tostring command.  900 is easily detectable as no one 
    is currently 9 ft tall.
*/
replace HEALTH_HEIGHT_1981=900 if HEALTH_HEIGHT_1981 < 0
tostring HEALTH_HEIGHT_1981, generate(strHeight1981)

/* 
    Generate intermediate height inches and feet variables.  Check new data
*/
generate heightFt1981=substr(strHeight1981,1,1)
generate heightIn1981=substr(strHeight1981,2,3)
list heightFt1981 in 1/5
list heightIn1981 in 1/5

/*
    Transform new inches and feet strings into integers and then combine in 
    formula height1981 = 12*ft + inches
*/
destring heightFt1981, replace
destring heightIn1981, replace
generate height81= 12*heightFt1981 + heightIn1981
replace height81=. if HEALTH_HEIGHT_1981==900
label variable height81 "Height in inches. '.' is invalid."
summarize height81 if height81!=.

/* 
    Generate height85. 
    Error codes are less than 0.  The error observations are replaced by '.'
*/  
generate height85 = HEALTH_HEIGHT_1985
replace height85=. if height85<0
label variable height85 "Height in inches. '.' is invalid."
summarize height85 if height85!=.

/* Create a delta height for sample. */
generate deltaHeight = height81-height85
label variable deltaHeight "in inches. (1981-1985) '.' is invalid"
summarize deltaHeight if deltaHeight!=.

/* 
    Create age96, age in 1996, .  
    FAM_1B_1979 is the age of the respondents in 1979.  
    Negative values are invalid response for various reasons.
*/
generate age96 = (1996 - 1979) + FAM_1B_1979
replace age96 =. if FAM_1B_1979 < 0
label variable age96 "R age in 1996"
summarize age96 if age > 0

/*
    Generate income, the reported income 1996.  
    Invalid values are negative. Note: 0 is a valid response for this question.
*/
codebook Q13_5_TRUNC_REVISED_1996
generate income = Q13_5_TRUNC_REVISED_1996
replace income =. if Q13_5_TRUNC_REVISED_1996 < 0
label variable income "R income (USD) in 1996 Note: top 2% truncated. '.' is invalid"
summarize income if income !=.
histogram income, percent
graph export "$output/incomeHistogram.png", as(png) replace

/*
    Generate the variable hours, the number of hours worked in 1996.  
    Invalid values are negative. Note: 0 is a valid response for this question.
*/
codebook HRSWK_PCY_1996
summarize HRSWK_PCY_1996 if HRSWK_PCY_1996 < 0 

generate hours = HRSWK_PCY_1996
replace hours =. if HRSWK_PCY_1996 < 0
label variable hours "Hours worked. '.' is invalid"
summarize hours if hours!=.

/*
    Generate fulltime variable.  
    fulltime will be 1 if hours > 1,000.  Otherwise 0.
*/
generate fulltime=hours > 1000
replace fulltime=. if hours==.
label variable fulltime "1 if hours > 1000. '.' is invalid"
tab fulltime if fulltime!=.

/*
    Generate ln(wages).  Stata will generate '.' (missing value) for ln(0)
*/
generate lnWage=ln(income/hours)
replace lnWage=. if income==. | hours==.
label variable lnWage "Ln of income/hours"
summarize lnWage if lnWage!=.

/*
    Generate basicOLS == 1 if lnWage, height81, height95, age96 are all present.
*/
generate basicOLS=(lnWage!=. & /// 
                   height81!=. & ///
                   height85!=. & ///
                   age96!=.)
label variable basicOLS "lnWage, height81, height85, age96 are all valid"
tab basicOLS

/*
    Generate educ.  This is the highest level of education  reported from the 
    1979,1988, 1994, and 1996 surveys.
*/
codebook Q3_4_*

/* 
    95 is ungraded.  This will be replaces by 0 so rowmax does not capture 
    this as the highest grade.
*/
foreach n of numlist 1979 1981 1985 1996 {
    generate Q3_4_`n'_norm = Q3_4_`n'
    replace Q3_4_`n'_norm = 0 if Q3_4_`n'_norm ==95
}
summarize Q3_4_*_norm

egen educ=rowmax(Q3_4_*_norm)
replace educ=. if educ<0
summarize educ
histogram educ, percent
graph export "$output/educHistogram.png", as(png) replace

/*
    Create variable evermarried.  Will be 1 if the person was ever married 
    between 1979-1994. 
*/
codebook MARSTAT_KEY_*

/* 
    Values less than 0 are error codes.  Values 1 or higher indicated the 
    respondent is currently or was previously married and is now either 
    separated, divorced or widowed.
*/
/*
    Find highest value for married.  Once respondent is above 0 then they
    are considered have been married.
*/
egen everMarried =rowmax(MARSTAT_KEY_*)

// Replace error codes with Stata missing value indicator
replace everMarried=. if everMarried < 0

// Set everMarried parameter to 1 if person was ever married.
replace everMarried=(everMarried>0)

tab everMarried

/*
    Create momSchool. This is the highest grade of mother's years of schooling 
    in 1979.
*/
codebook HGC_MOTHER_1979
label list vlR0006500
summarize HGC_MOTHER_1979

generate momSchool=HGC_MOTHER_1979
replace momSchool=. if HGC_MOTHER_1979<0
summarize momSchool

/*
    Generate momSkilled.  This will be 1 if the mother's occupation code is 
    classified as professional/managerial.
*/
codebook FAMOCC_19_1979
label list vlR0006900
summarize FAMOCC_19_1979 if FAMOCC_19_1979 < 0

/* 
    Codes 1-245 are considered professional/managerial. Negative values are 
    error codes.
*/
generate momSkilled = FAMOCC_19_1979
replace momSkilled=. if FAMOCC_19_1979 < 0
replace momSkilled= 1 if (momSkilled <= 245 & momSkilled!=.)
replace momSkilled= 0 if (momSkilled > 245 & momSkilled!=.)
tab momSkilled
tab FAMOCC_19_1979 if FAMOCC_19_1979 < 0

/*
    Create dadSchool and dadSkilled. Job codes 1-245 are considered 
    professional/managerial.
*/
codebook HGC_FATHER_1979 FAMOCC_26_1979

// Dad's education level
generate dadSchool=HGC_FATHER_1979
replace dadSchool=. if HGC_FATHER_1979<0
summarize dadSchool

// Create dummy indicating whether dad is a skilled worker
generate dadSkilled = FAMOCC_26_1979  
replace dadSkilled=. if FAMOCC_26_1979   < 0
replace dadSkilled= 1 if (dadSkilled <= 245 & dadSkilled!=.)
replace dadSkilled= 0 if (dadSkilled > 245 & dadSkilled!=.)
tab dadSkilled
tab HGC_FATHER_1979 if HGC_FATHER_1979<0

/*
    Create siblings which is equal to FAM_28A_1979. Negative values indicate 
    invalid/lack of responses.
*/
codebook FAM_28A_1979
generate siblings=FAM_28A_1979
replace siblings=. if siblings<0
summarize siblings

/*
    Generate finalSample variable.  This indicates that on the necessary 
    observations are available in the data.
*/
generate finalSample=(height81!=. & height85!=. & age96!=. & ///
                     momSchool!=. & momSkilled!=. & ///
                     dadSchool!=. & dadSkilled!=. & ///
                     siblings!=. & lnWage !=.)
tab finalSample

/* =============================================
Explore and compare groups
================================================*/

// Create macro for family characteristics
global family "age96 momSchool momSkilled dadSchool dadSkilled siblings everMarried"
summarize $family

global adjX "momSchool momSkilled dadSchool dadSkilled siblings"
global criteria "finalSample==1 & fulltime==1"

/*
    Generate modified Table 1 for unrestricted sample and finalSample ==1
*/
// Unrestricted sample
tabstat height81 height85 deltaHeight, statistics(mean q n sd) 

// Restricted to finalSample == 1 and fulltime == 1
tabstat height81 height85 deltaHeight if $criteria, statistics(mean q n sd) 

/*
    Generate Modified table 2 that displays characteristics by above/below 
    median height.
*/
// Generate aboveMedian
generate aboveMedian=(height85>71)

// Generate information for the table
tabstat height81 height85 lnWage $family if $criteria, /// 
    by(aboveMedian) statistics(mean sd n)

/* 
    Regress each variable on aboveMedian to estimate size and significance of 
    difference.  Display estimates for aboveMedian==1 only
*/
quietly foreach var of varlist height81 height85 lnWage $family{ 
    regress `var' i.aboveMedian if $criteria, robust
    eststo `var'Diff
}
esttab height81Diff height85Diff age96Diff lnWageDiff, ///
    keep(1.aboveMedian) se
    
esttab everMarriedDiff momSchoolDiff momSkilledDiff, ///
    keep(1.aboveMedian) se

esttab dadSchoolDiff dadSkilledDiff, ///
    keep(1.aboveMedian) se

/* =============================================
Generate OLS estimes for Table 3
================================================*/
regress lnWage height85 age96 if $criteria, robust
eststo ols5

regress lnWage height85 age96 $adjX if $criteria, robust
eststo ols6

regress lnWage height81 height85 age96 if $criteria, robust
eststo ols7

regress lnWage height81 height85 age $adjX if $criteria, robust
eststo ols8

* Print Output of regressions to console*/
esttab ols*, ///
    noconstant se ar2 obslast scalars(F) ///
    order(height85 height81) ///
    coeflabels(height85 "Adult Height (inches)" ///
               height81 "Youth height (inches)" ///
               age96 "Age" ///
               momSchool "Mother's years of schooling" /// 
               momSkilled "Mother Skilled/Professional" /// 
               dadSchool "Father's years of schooling" ///
               dadSkilled "Father Skilled/Professional" ///
               siblings "Number of siblings") ///
    addnotes("Full-time employed white males")
    
/* Print Output of regressions to file*/    
esttab ols* using $output/table3.tex, replace ///
    noconstant se ar2 obslast scalars(F) ///
    order(height85 height81) ///
    coeflabels(height85 "Adult Height (inches)" ///
               height81 "Youth height (inches)" ///
               age96 "Age" ///
               momSchool "Mother's years of schooling" /// 
               momSkilled "Mother Skilled/Professional" /// 
               dadSchool "Father's years of schooling" ///
               dadSkilled "Father Skilled/Professional" ///
               siblings "Number of siblings") ///
    addnotes("Full-time employed white males")

log close
clear

/***************************************************************************
>>>>>>>>>>>>>>    E N D    O F     F I L E  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
****************************************************************************/